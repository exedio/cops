<%
/*
 * Copyright (C) 2004-2009  exedio GmbH (www.exedio.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

package com.exedio.cops;

import static com.exedio.cops.PropertiesServlet.SET;
import static com.exedio.cops.PropertiesServlet.DRY_RUN;
import static com.exedio.cops.PropertiesServlet.FIELD_SELECT;
import static com.exedio.cops.PropertiesServlet.FIELD_VALUE_PREFIX;
import static com.exedio.cops.PropertiesServlet.FIELDS_RAW;
import static com.exedio.cops.PropertiesServlet.PROBE_NUMBER;
import static com.exedio.cops.TimeUtil.toMillies;
import static java.nio.charset.StandardCharsets.UTF_8;

import io.micrometer.core.instrument.Timer;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Callable;

import javax.servlet.http.HttpServletRequest;

import com.exedio.cope.util.Properties;
import com.exedio.cope.util.Properties.Field;
import com.exedio.cope.util.Properties.ProbeAbortedException;
import com.exedio.cops.PropertiesServlet.EditedSource;

final class Properties_Jspm
{
	private static final String RUN_PROBES = "runProbes";

	static void write(
			final Out out,
			final PropertiesCop cop,
			final HttpServletRequest request,
			final String caption,
			final String footerDate,
			final Set<String> orphaned,
			final boolean overridable,
			final ArrayList<EditedSource> edited,
			final Properties properties,
			final Properties reloaded,
			final RuntimeException reloadFailure)
	{
%><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="content-type" content="text/html; charset=<%=UTF_8%>">
		<title><%=caption%></title>
		<link rel="shortcut icon" href="<%=PropertiesServlet.shortcutIcon%>" type="image/png">
		<link rel="STYLESHEET" type="text/css" href="<%=PropertiesServlet.stylesheet%>">
		<script src="<%=PropertiesServlet.script%>" type="text/javascript"></script>
	</head>
	<body>
		<a href="https://exedio.github.io/" target="_blank"><img src="<%=PropertiesServlet.logo%>" alt="Exedio Logo" class="logo"></a>
		<h1><%=caption%></h1>
		<div class="footer"><%=properties.getSource()%></div>
		<div class="footer">
		<%
			if(orphaned==null)
			{
			%>
			Detection of orphaned source keys not possible, since Source.keySet() returns null.<%
			}
			else if(orphaned.isEmpty())
			{
			%>
			No orphaned source keys.<%
			}
			else
			{
			%>
			Orphaned source keys: <%=orphaned%><%
			}
		%>
		</div>
		<%
		if(!edited.isEmpty())
		{
		%>
		<table>
			<caption>Transient Changes</caption>
			<tr>
				<th>When</th>
				<th>By</th>
				<th>Key</th>
				<th>Value</th>
			</tr><%

		for(final EditedSource e : edited)
		{
			boolean first = true;
			final int rowspan = e.content().size();
			for(final Map.Entry<String,String> en : e.content().entrySet())
			{
			%>
			<tr><%
				if(first)
				{
				%>
				<td rowspan="<%=rowspan%>"><%= e.timestamp() %></td>
				<td rowspan="<%=rowspan%>"><% if(e.authentication!=null){%><%=e.authentication%><%} %></td><%
					first = false;
				}
				%>
				<td><%=en.getKey()%></td>
				<td><%=en.getValue()%></td>
			</tr><%
			}
		}
		%>
		</table><%
		}

		if(cop.hasShowHidden())
		{
		%>
		<div class="footer"><a href="<%=cop.clearShowHidden()%>">hide hidden fields</a></div><%
		}
		%>
		<div><img class="check" onClick="toggleUnspecified(this)" src="<%=PropertiesServlet.checkFalse%>"> show unspecified</div>
		<form method="post">
		<table id="properties-table" class="hide-unspecified"><%
		int idNum = 0;
		final ArrayList<Field<?>> reloadedFields = new ArrayList<>();
		for(final Field<?> field : properties.getFields())
		{
			final boolean fieldSpecified = field.isSpecified();
			final Object reloadedNewValue = PropertiesCop.reloadedNewValue(field, reloaded, reloadedFields);
			idNum++;
			%>
			<tr<% if(!fieldSpecified){ %> class="unspecified"<% } %>><%

			if(overridable)
			{
				%>
				<th><input type="checkbox" name="<%=FIELD_SELECT%>" value="<%=field.getKey()%>" onClick="onCheckbox(this,'fid<%=idNum%>')"></th><%
			}
				%>
				<th><%=field.getKey()%></th><%

		if(cop.isHidden(field))
		{
				%>
				<td class="notavailable<%
					//noinspection VariableNotUsedInsideIf
					if(reloadedNewValue!=null){%> tobereloaded<%}
					%>" colspan="2">hidden (<a href="<%=
					cop.addShowHidden(field)%>">show</a>)</td><%
		}
		else
		{
				%>
				<td<%
					//noinspection VariableNotUsedInsideIf
					if(reloadedNewValue!=null){%> class="tobereloaded"<%} %>><%=
					field.getValueString()%><%

					if(fieldSpecified)
					{
						final Object fieldDefault = field.getDefaultValue();
						%> <small><%
						if(fieldDefault!=null)
						{
							if(fieldDefault.equals(field.getValue()))
							{
								%><i>(<u>set to default</u>)</i><%
							}
							else
							{
								%>(<%=field.getString(fieldDefault)%>)<%
							}
						}
						else
						{
							final String failure = field.getDefaultValueFailure();
							if(failure==null)
							{
								%><i>(no default)</i><%
							}
							else
							{
								%><i>(illegal default: <%=failure%>)</i><%
							}
						}
						%></small><%
					}
					if(reloadedNewValue!=null)
					{
						%><hr class="reload"><%=
						field.getString(reloadedNewValue)%> <span class="tobereloaded">to be reloaded</span><%
					}
					if(overridable)
					{
						%><br><input id="fid<%=idNum%>" class="propertyValue" name="<%=FIELD_VALUE_PREFIX%><%=field.getKey()%>"><%
					}
					%></td><%
		}
			%>
			</tr><%
		}
		%>
		</table><%

		if(overridable)
		{
			%>
<textarea name="<%=FIELDS_RAW%>" cols="100" rows="3" wrap="off">
# Here you can enter any key-value pairs in the syntax of java.util.Properties#load
#
</textarea><%
		}

		if(!reloadedFields.isEmpty())
		{
			%>
			<table>
				<caption>To be Reloaded</caption><%

			for(final Field<?> field : reloadedFields)
			{
				final String key = field.getKey();
				%>
				<tr>
					<th><%=key%></th><%

				if(cop.isHidden(field))
				{
					%>
					<td class="notavailable">hidden (<a href="<%=
						cop.addShowHidden(field)%>">show</a>)</td><%
				}
				else
				{
					%>
					<td><%=
						properties.getField(key).getValueString()
						%><hr class="reload"><%=
						field.getValueString()
					%></td><%
				}
				%>
				</tr><%
			}
			%>
			</table><%
		}
		if(reloadFailure!=null)
		{
			%>
			<table>
				<caption>Changes in Source are Invalid</caption>
				<tr>
					<td><% StackTrace_Jspm.write(out, reloadFailure); %></td>
				</tr>
			</table><%
		}
		%>
			<table>
				<caption>Probes</caption><%

			writeProbeCheckAll(out);

			int probeNumber = -1;
			final HashSet<Integer> doProbeNumbers;
			if(Cop.isPost(request) && request.getParameter(RUN_PROBES)!=null)
			{
				doProbeNumbers = new HashSet<>();
				final String[] doProbeNumberStrings = request.getParameterValues(PROBE_NUMBER);
				if(doProbeNumberStrings!=null)
				{
					for(final String doProbeNumberString : doProbeNumberStrings)
						doProbeNumbers.add(Integer.parseInt(doProbeNumberString));
				}
			}
			else
			{
				doProbeNumbers = null;
			}

			for(final Callable<?> probe : properties.getProbes())
			{
				probeNumber++;
				final String probeName = probe.toString();
				final EnumMap<ProbeResult, Timer> timers = ProbeResult.timers(probeName, caption);
				%>
				<tr>
					<th><input class="probecheck" type="checkbox" name="<%=PROBE_NUMBER%>" value="<%=probeNumber%>" checked="true"></th>
					<th><%=probeName%></th><%

				if(doProbeNumbers!=null && doProbeNumbers.contains(probeNumber))
				{
					%>
					<td class="number"><%
						final Object result;
						final Timer.Sample start = Timer.start();
						try
						{
							result = probe.call();
							final long elapsed = start.stop(timers.get(ProbeResult.success));
							%><%=toMillies(elapsed)%></td>
							<td>OK<%
							if(result!=null)
							{
								%>: <%=result.toString()%><%
							}
						}
						catch(final ProbeAbortedException e)
						{
							final long elapsed = start.stop(timers.get(ProbeResult.abort));
							final String message = e.getMessage();
							%><%=toMillies(elapsed)%></td>
							<td class="aborted">aborted<%
							if(message!=null)
							{
								%>: <%=message%><%
							}
						}
						catch(final Exception e)
						{
							final long elapsed = start.stop(timers.get(ProbeResult.failure));
							%><%=toMillies(elapsed)%></td>
							<td class="failed">failed:
							<%
							StackTrace_Jspm.write(out, e);
						}
						%></td><%
				}
				%>
				</tr><%
			}
			writeProbeCheckAll(out);
			%>
			</table>
			<input type="submit" name="<%=RUN_PROBES%>" value="Run Probes"><%

		if(overridable)
		{
			%>
			<input type="submit" name="<%=SET%>" value="Run Probes, Reload, and Set Fields">
			<input type="checkbox" name="<%=DRY_RUN%>">dry run<%
		}
		%>
		</form>
		<hr>
		<div class="footer"><%=footerDate%></div>
	</body>
</html><%
	}

	private static void writeProbeCheckAll(
			final Out out)
	{
				%>
				<tr>
					<th><input class="probecheck" type="checkbox" onclick="checkAll(this)" checked></th>
					<th><i>(un)check all probes</i></th>
				</tr><%
	}


	private Properties_Jspm()
	{
		// prevent instantiation
	}
}
%>
